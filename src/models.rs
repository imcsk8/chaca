// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]

use crate::schema::*;
use crate::types::*;
use rocket::serde::json::serde_json;
use diesel::serialize::ToSql;
use diesel::deserialize::FromSql;
use diesel::sql_types::Jsonb;
use diesel::AsExpression;
use serde_json::Value as JsonValue;
use rocket::serde::{ Deserialize, Serialize };

use chrono::NaiveDateTime;
use uuid::Uuid;
use chrono::DateTime;
use chrono::offset::Utc;
use diesel::prelude::*;
#[derive(Clone, Debug, Identifiable, Queryable, QueryableByName, Selectable, Insertable, Serialize, Deserialize, AsChangeset)]
#[diesel(table_name = candidate)]
pub struct Candidate {
    pub id: Uuid,
    pub external_uuid: Option<Uuid>,
    pub external_id: Option<i32>,
    pub state: i32,
    pub position: i32,
    pub district: Option<i32>,
    pub poder: Uuid,
    pub fullname: String,
    pub matter: Option<Uuid>,
    pub num_boleta: i32,
    pub sex: Sexo,
    pub age: i32,
    pub website: Option<String>,
    pub telephone: Option<String>,
    pub email: Option<String>,
    pub image_url: Option<String>,
    pub curriculum_url: Option<String>,
    pub video_url: Option<String>,
    pub candidato_url: Option<String>,
    pub ambito: AmbitoEleccion,
    pub firstname: Option<String>,
    pub paterno: Option<String>,
    pub materno: Option<String>,
    #[diesel(serialize_as = JsonValue)]
    pub raw_data: Option<serde_json::Value>,
}

#[derive(Clone, Debug, Identifiable, Queryable, QueryableByName, Selectable, Insertable, Serialize, Deserialize, AsChangeset)]
#[diesel(table_name = candidate_extras)]
pub struct CandidateExtra {
    pub id: i32,
    pub candidate_id: Option<Uuid>,
    pub question: String,
    pub answer: String,
}

#[derive(Clone, Debug, Identifiable, Queryable, QueryableByName, Selectable, Insertable, Serialize, Deserialize, AsChangeset)]
#[diesel(primary_key(reaction_id))]
#[diesel(table_name = candidate_reactions)]
pub struct CandidateReaction {
    pub reaction_id: i32,
    pub candidate_id: Uuid,
    pub user_id: Uuid,
    pub reaction_type: Reaction,
    pub created_at: Option<DateTime<Utc>>,
}

#[derive(Clone, Debug, Identifiable, Queryable, QueryableByName, Selectable, Insertable, Serialize, Deserialize, AsChangeset)]
#[diesel(table_name = candidate_social_media)]
pub struct CandidateSocialMedia {
    pub id: i32,
    pub candidate_id: Option<Uuid>,
    pub url: String,
}

#[derive(Clone, Debug, Identifiable, Queryable, QueryableByName, Selectable, Insertable, Serialize, Deserialize, AsChangeset)]
#[diesel(table_name = cat_district)]
pub struct CatDistrict {
    pub id: i32,
    pub name: Option<String>,
    pub id_inegi: i32,
}

#[derive(Clone, Debug, Identifiable, Queryable, QueryableByName, Selectable, Insertable, Serialize, Deserialize, AsChangeset)]
#[diesel(primary_key(uuid))]
#[diesel(table_name = cat_matter)]
pub struct CatMatter {
    pub uuid: Uuid,
    pub name: String,
}

#[derive(Clone, Debug, Identifiable, Queryable, QueryableByName, Selectable, Insertable, Serialize, Deserialize, AsChangeset)]
#[diesel(primary_key(uuid))]
#[diesel(table_name = cat_poder)]
pub struct CatPoder {
    pub uuid: Uuid,
    pub short_name: Option<String>,
    pub name: Option<String>,
}

#[derive(Clone, Debug, Identifiable, Queryable, QueryableByName, Selectable, Insertable, Serialize, Deserialize, AsChangeset)]
#[diesel(table_name = cat_positions)]
pub struct CatPosition {
    pub id: i32,
    pub cargo: String,
    pub male_name: String,
    pub female_name: String,
    pub long_name: String,
}

#[derive(Clone, Debug, Identifiable, Queryable, QueryableByName, Selectable, Insertable, Serialize, Deserialize, AsChangeset)]
#[diesel(primary_key(id_inegi))]
#[diesel(table_name = cat_state)]
pub struct CatState {
    pub id_inegi: i32,
    pub name: Option<String>,
}

#[derive(Clone, Debug, Identifiable, Queryable, QueryableByName, Selectable, Insertable, Serialize, Deserialize, AsChangeset)]
#[diesel(primary_key(reaction_id))]
#[diesel(table_name = comment_reactions)]
pub struct CommentReaction {
    pub reaction_id: i32,
    pub comment_id: i32,
    pub user_id: Uuid,
    pub reaction_type: Reaction,
    pub created_at: Option<DateTime<Utc>>,
}

#[derive(Clone, Debug, Identifiable, Queryable, QueryableByName, Selectable, Insertable, Serialize, Deserialize, AsChangeset)]
#[diesel(primary_key(comment_id))]
#[diesel(table_name = comments)]
pub struct Comment {
    pub comment_id: i32,
    pub user_id: Uuid,
    pub content: String,
    pub parent_comment_id: Option<i32>,
    pub resource_id: String,
    pub resource_type: String,
    pub created_at: Option<DateTime<Utc>>,
    pub updated_at: Option<DateTime<Utc>>,
    pub is_edited: Option<bool>,
    pub is_hidden: Option<bool>,
    pub likes_count: Option<i32>,
}

#[derive(Clone, Debug, Identifiable, Queryable, QueryableByName, Selectable, Insertable, Serialize, Deserialize, AsChangeset)]
#[diesel(table_name = users)]
pub struct User {
    pub id: Uuid,
    pub name: Option<String>,
    pub profile_picture_url: Option<String>,
    pub email: String,
    pub password: Option<String>,
    pub oauth_provider: String,
    pub oauth_user_id: String,
    pub access_token: String,
    pub refresh_token: Option<String>,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
    pub last_login: Option<DateTime<Utc>>,
}

